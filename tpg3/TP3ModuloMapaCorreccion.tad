// Una coordenada se representa con tupla ⟨x:nat, y:nat⟩

Representación:
	Mapa se representa con estr donde 
		estr es tupla ⟨	largo:			nat,
										alto:   		nat,
										inicio: 		coordenada,
										llegada: 		coordenada,
										paredes: 		conjLineal(coordenada),
										fantasmas:  conjLineal(coordenada),
										chocolates: conjLineal(coordenada),
										tablero: 		arreglo[e.largo] de arreglo[e.alto] de char⟩

Solución Informal:
	- El e.inicio es distinto a e.llegada. 
	- e.chocolates, e.paredes y e.fantasmas son disjuntos. 
	- e.inicio. e.llegada y todas las coordenadas en e.chocolates, e.paredes 
	  y e.fantasmas son menores o iguales que <e.largo, e.alto>. 
	-	Las coordenadas de los 3 conjuntos, e.inicio y e.llegada son mayores a 0.  
	- e.inicio y e.llegada no pertencen a e.paredes o e.fantasmas. 
	- Los valores de e.tablero pueden ser P, C, F, I, L o son V. X,Y denotan el caso en el que un chocolate se encuentra en la misma 
		coordenada que inicio y llegada respectivamente. 
	- Para toda coordenada coor en los conjuntos, e.paredes, e.fantasmas,
		e.tablero[π₁(coor)][π₂(coor)] = inicial correspondiente. 
		En el caso de una posicion vacia será un V. En el caso de e.inicio y e.llegada la inicial 
		puede ser X, I para el caso de e.inicio y Y, L para e.llegada. 
	- Para toda coordenada coor perteneciente a e.chocolates, e.tablero[π₁(coor)-1][π₂(coor)-1] 
		pueden ser igual a C, V, X, Y según lo que corresponda. 
		
---
Función de abstracción:
	Abs:	estr	->	tipoDato	{Rep(e)}
	(∀e: estr) Abs(e) =obs m: Mapa | (1) ∧ (2) ∧ (3) ∧ (4) ∧ (5) ∧ (6) ∧ (7)
		donde: 
		(1)	≡	largo(m) =obs e.largo 
		(2)	≡	alto(m) =obs e.alto 
		(3) ≡ inicio(m) =obs e.inicio
		(4) ≡ llegada(m) =obs e.llegada
		(5) ≡ paredes(m) =obs e.paredes 
		(6) ≡ fantasmas(m) =obs e.fantasmas
		(7) ≡ chocolates(m) =obs e.chocolates 
---
Interfaz:
	Parámetros formales:
		Géneros:	mapa 
		Función:
			Copiar(in a: mapa) -> res: mapa
			Pre ≡ {true} 
			Post ≡ {res = a} 
			Complejidad: Θ(copy(a))
			Descripción: Función copia de mapa. 
			---
	Se explica con:	Mapa
	Géneros:		mapa  
	
	Operaciones básicas:
		NuevoMapa(in largo, alto: nat, in inicio, llegada: coordenada, in paredes, fantasmas, chocolates: conj(coordenada))	-> res: mapa 
		Pre ≡ {DisjuntosDeAPares(paredes, fantasmas, chocolates) ∧ inicio, llegada ∉ (paredes ∪ fantasmas) ∧ inicio ≠ llegada ∧ 1 ≤ π₀(inicio), π₀(llegada) ≤ largo ∧ 
					 1 ≤ π₁(inicio), π₁(llegada) ≤ alto ∧ (∀c:coordenada)( (c ∈ paredes ∨ c ∈ fantasmas ∨ c ∈ chocolates) =>L (1 ≤ π₀(c) ≤ largo ∧ 1 ≤ π₁(c) ≤ alto) ) } 
		Post ≡ {res =obs nuevoMapa(largo, alto, inicio, llegada, paredes, fantasmas, chocolates)}
																
		Complejidad: Θ(alto * largo)
		Descripción: Genera un nuevo mapa. 
		Aliasing: No presenta aspectos de aliasing. 
		---		
		Largo(in mapa: mapa) -> res: nat 
		Pre  ≡ {true} 
		Post ≡ {res =obs largo(mapa)}
		Complejidad: Θ(1)
		Descripción: Devuelve el largo del mapa. 
		Aliasing: No presenta aspectos de aliasing. 
		---
		Alto(in mapa: mapa) -> res: nat 
		Pre  ≡ {true} 
		Post ≡ {res =obs alto(mapa)}
		Complejidad: Θ(1)
		Descripción: Devuelve el alto del mapa. 
		Aliasing: No presenta aspectos de aliasing.
		---
		Inicio(in mapa: mapa) -> res: coordenada  
		Pre  ≡ {true} 
		Post ≡ {res =obs inicio(mapa)}
		Complejidad: Θ(1)
		Descripción: Devuelve la coordenada de inicio. 
		Aliasing: No presenta aspectos de aliasing.
		---
		Llegada(in mapa: mapa) -> res: coordenada  
		Pre  ≡ {true} 
		Post ≡ {res =obs llegada(mapa)}
		Complejidad: Θ(1)
		Descripción: Devuelve la coordenada de llegada. 
		Aliasing: No presenta aspectos de aliasing.
		---
		Paredes(in mapa: mapa) -> res: conj(coordenada)  
		Pre  ≡ {true} 
		Post ≡ {res =obs paredes(mapa)}
		Complejidad: Θ(copy(conj(coordenada))) 
		Descripción: Devuelve el conjunto de coordenadas donde se encuentran paredes. 
		Aliasing: No presenta aspectos de aliasing.
		---
		Fantasmas(in mapa: mapa) -> res: conj(coordenada)  
		Pre  ≡ {true} 
		Post ≡ {res =obs fantasmas(mapa)}
		Complejidad: Θ(copy(conj(coordenada))) 
		Descripción: Devuelve el conjunto de coordenadas donde se encuentran fantasmas. 
		Aliasing: No presenta aspectos de aliasing.
		---
		Chocolates(in mapa: mapa) -> res: conj(coordenada)  
		Pre  ≡ {true} 
		Post ≡ {res =obs chocolates(mapa)}
		Complejidad: Θ(copy(conj(coordenada))) 
		Descripción: Devuelve el conjunto de coordenadas donde se encuentran chocolates. 
		Aliasing: No presenta aspectos de aliasing.
		---
		Distancia(in pos1, pos2: coordenada) -> res: nat
		Pre  ≡ {true} 
		Post ≡ {res =obs distancia(pos1, pos2)}
		Complejidad: Θ(1)
		Descripción: Calcula la distancia Manhattan entre dos coordenadas. 
		Aliasing: No presenta aspectos de aliasing.
		--- 
		DistConFantasmaMasCercano(in fantasmas: conj(coordenada), in pos: coordenada) -> res: nat 
		Pre  ≡ {¬vacío?(fantasmas)}
		Post ≡ {(∀f:coordenada)( f ∈ fantasmas₀ =>L distancia(pos,f) ≥ res  ) ∧ 
						(∃f:coordenada)( f ∈ fantasmas₀ ∧L  distancia(pos,f) = res  )}
		Complejidad: Θ(#(fantasmas₀))
		Descripción: Calcula la distancia con el fantasma mas cercano. 
		Aliasing: No presenta aspectos de aliasing. 
		---
		hayFantasmaEnAlrededores(in mapa:estr, in pos: coordenada) -> res:bool
		Pre ≡ {true}
		Post ≡ {res =obs DistConFantasmaMasCercano(mapa.fantasmas, pos) <= 3 }
		Complejidad: O(1)
		Descripción: Devuelve si hay fantasmas a distancia menor o igual a 3 del jugador. 
		Aliasing: No presenta aspectos de aliasing. 
		---
		EnRango(in pos: coordenada, in largo, alto: nat) -> res: bool 
		Pre  ≡ {true}
		Post ≡ {res =obs enRango(pos, largo, alto)}
		Complejidad: Θ(1)
		Descripción: Devuelve si una coordenada está dentro de los limites del mapa. 
		Aliasing: No presenta aspectos de aliasing. 
		---
	Algoritmos del módulo: 
		iNuevoMapa(in largo, alto: nat, in inicio, llegada: coordenada, 
		in paredes, fantasmas, chocolates: conj(coordenada)) -> res: mapa    
			tablero <- crearArreglo(largo) 
			for i ← 0, i < largo, i++
				tablero[i] <- crearArreglo(alto)
			end for
			
			res <- ⟨largo, ancho, inicio, llegada, paredes, fantasmas, chocolates, tablero⟩ 
			
			for i ← 0, i < largo, i++
				for j ← 0, j < alto, j++
					res.tablero[i][j] <- V
				end for
			end for 
			
			for e in res.paredes do 
				res.tablero[e.x-1][e.y-1] <- P 
			end for 
			
			for e in res.fantasmas do 
				res.tablero[e.x-1][e.y-1] <- F 
			end for
			
			for e in res.chocolates do 
				res.tablero[e.x-1][e.y-1] <- C
			end for
			
			if res.tablero[res.inicio.x-1][res.inicio.y-1] = C then 
				res.tablero[res.inicio.x-1][res.inicio.y-1] <- X 
			else 
				res.tablero[res.inicio.x-1][res.inicio.y-1] <- I 
		  end if 
			
			if res.tablero[res.llegada.x-1][res.llegada.y-1] = C then 
				res.tablero[res.llegada.x-1][res.llegada.y-1] <- Y 
			else 
				res.tablero[res.llegada.x-1][res.llegada.y-1] <- L 
		  end if
	 ---
	 iLargo(in mapa: estr) -> res: nat 
	 res <- mapa.largo  
	 ---	 	
	 iAlto(in mapa: estr) -> res: nat 
	 res <- mapa.alto
	 ---
	 iInicio(in mapa: estr) -> res: coordenada
	 res <- mapa.inicio 
	 ---
	 iLlegada(in mapa: estr) -> res: coordenada 
	 res <- mapa.llegada
	 ---
	 iParedes(in mapa: estr) -> res: conj(coordenada)
	 res <- mapa.paredes 
	 ---
	 iFantasmas(in mapa: estr) -> res: conj(coordenada)
	 res <- mapa.fantasmas
	 ---
	 iChocolates(in mapa: estr) -> res: conj(coordenada)
	 res <- mapa.chocolates 
	 ---
	 iDistancia(in pos1, pos2: coordenada) -> res: nat 
	 res <- |pos1.x − pos2.x| + |pos1.y − pos2.y| 
	 ---
	 ihayFantasmaEnAlrededores(in mapa: estr, in pos: coordenada) -> res: bool 
	 res <- false
	 for i=-3 ... i=3 do 
	 	for j=-(3-abs(i)) ... j=3-abs(i) do 
		 	if(enRango(make_pair(pos.first+i, pos.second+j), mapa.largo, mapa.alto))
            	res <- res || ((mapa.tablero)[pos.first+i-1][pos.second+j-1] = 'F')
			end if 
		end for 
	 end for 
	 --- 
	 iEnRango(in pos: coordenada, in largo, alto: nat) -> res: bool  
	 res <- pos.x > 0 && pos.x ≤ largo && pos.y > 0 && pos.y ≤ alto
	 ---
	Operaciones Auxiliares:
		DisjuntosDeAPares(in a, b, c: conj(α)) -> res: bool 
		Pre  ≡ {a = a₀ ∧ b = b₀ ∧ c = c₀}
		Post ≡ {res =(#(a₀) + #(b₀) + #(c₀) = #(a₀ ∪ b₀ ∪ c₀))}				
		Compejidad: Θ(1)
		Descripción: Devuelve si tres conjuntos son disjuntos de a pares. 
		Aliasing: No presenta aspectos de aliasing.  		 
